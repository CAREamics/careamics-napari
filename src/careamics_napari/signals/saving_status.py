"""Status and updates generated by the saving worker."""

from dataclasses import dataclass
from enum import Enum, IntEnum
from typing import TYPE_CHECKING, Optional, Union

from psygnal import evented

if TYPE_CHECKING:
    from psygnal import SignalGroup, SignalInstance

    # Class only declared at time checking in order to allow the autocompletion and
    # type checker to show the "events" attribute of the @evented class.
    class SavingSignalGroup(SignalGroup):
        """Signal group for the saving status dataclass."""

        state: SignalInstance
        """Current state of the saving process."""


class SavingUpdateType(str, Enum):
    """Type of saving update."""

    STATE = "state"
    """Current state of the saving process."""

    DEBUG = "debug message"
    """Debug message."""

    EXCEPTION = "exception"
    """Exception raised during the saving process."""


class SavingState(IntEnum):
    """Saving state."""

    IDLE = 0
    """Saving is idle."""

    SAVING = 1
    """Saving is ongoing."""

    DONE = 2
    """Saving is done."""

    CRASHED = 3
    """Saving has crashed."""


@dataclass
class SavingUpdate:
    """Update from the saving worker."""

    type: SavingUpdateType
    """Type of the update."""

    value: Optional[Union[str, SavingState, Exception]] = None
    """Content of the update."""


@evented
@dataclass
class SavingStatus:
    """Status of the saving thread.

    This dataclass is used to update the saving UI with the current status and
    progress of the saving. Listeners can be registered to the `events` attribute to
    be notified of changes in the value of the attributes (see `psygnal` documentation
    for more details).
    """

    if TYPE_CHECKING:
        events: SavingSignalGroup
        """Attribute allowing the registration of parameter-specific listeners."""

    state: SavingState = SavingState.IDLE
    """Current state of the saving process."""

    def update(self, new_update: SavingUpdate) -> None:
        """Update the status with the new update.

        Parameters
        ----------
        new_update : SavingUpdate
            New update to apply.
        """
        setattr(self, new_update.type.value, new_update.value)
